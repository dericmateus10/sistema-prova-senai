// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tipo {
  BASICA
  TECNICA
}

model Course {
  id   Int   @id @default(autoincrement())
  name String

  ucs  Uc[]

  @@map("courses")
}

model Module {
  id   Int   @id @default(autoincrement())
  name String

  ucs  Uc[]

  @@map("modules")
}

model Uc {
  id          Int                  @id @default(autoincrement())
  description String
  courseId    Int
  moduleId    Int

  course      Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module               @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  saepCaps    CapabilitiesSaep[]
  caps        Capability[]

  @@index([courseId])
  @@index([moduleId])
  @@map("ucs")
}

model BloomTaxonomy {
  id        Int                  @id @default(autoincrement())
  name      String
  examples  String?

  saepCaps  CapabilitiesSaep[]
  caps      Capability[]

  @@map("bloom_taxonomies")
}

model CapabilitiesSaep {
  id                Int               @id @default(autoincrement())
  description       String
  bloomTaxonomyId   Int
  ucId              Int
  subFunctionId     Int                // novo campo
  tipo              Tipo

  bloomTaxonomy     BloomTaxonomy     @relation(fields: [bloomTaxonomyId], references: [id], onDelete: Cascade)
  uc                Uc                @relation(fields: [ucId], references: [id], onDelete: Cascade)
  subFunction       SubFunction       @relation(fields: [subFunctionId], references: [id], onDelete: Cascade)
  capabilities      Capability[]

  @@index([bloomTaxonomyId])
  @@index([ucId])
  @@index([subFunctionId])     // índice para otimização
  @@map("capabilities_saep")
}

model Functions {
  id          Int               @id @default(autoincrement())
  description String

  subFuncs    SubFunction[]

  @@map("functions")
}

model SubFunction {
  id           Int                  @id @default(autoincrement())
  description  String
  functionId   Int

  function     Functions            @relation(fields: [functionId], references: [id], onDelete: Cascade)
  standards    PerformanceStandard[]
  saepCaps     CapabilitiesSaep[]
  caps         Capability[]         // permite navegar da subfunção para capacidades associadas

  @@index([functionId])
  @@map("sub_functions")
}

model PerformanceStandard {
  id             Int           @id @default(autoincrement())
  description    String
  subFunctionId  Int

  subFunction    SubFunction   @relation(fields: [subFunctionId], references: [id], onDelete: Cascade)

  @@index([subFunctionId])
  @@map("performance_standards")
}

model Knowledge {
  id          Int                     @id @default(autoincrement())
  description String
  examples    String?

  capLinks    CapabilityKnowledge[]

  @@map("knowledge")
}

model Capability {
  id                  Int                     @id @default(autoincrement())
  description         String
  bloomTaxonomyId     Int
  ucId                Int
  capabilitySaepId    Int?
  subFunctionId       Int                     // novo campo

  bloomTaxonomy       BloomTaxonomy           @relation(fields: [bloomTaxonomyId], references: [id], onDelete: Cascade)
  uc                  Uc                      @relation(fields: [ucId], references: [id], onDelete: Cascade)
  saep                CapabilitiesSaep?       @relation(fields: [capabilitySaepId], references: [id], onDelete: Cascade)
  subFunction         SubFunction             @relation(fields: [subFunctionId], references: [id], onDelete: Cascade)
  knowledgeLinks      CapabilityKnowledge[]

  @@index([bloomTaxonomyId])
  @@index([ucId])
  @@index([capabilitySaepId])
  @@index([subFunctionId])    // índice para otimização
  @@map("capabilities")
}

model CapabilityKnowledge {
  capability   Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
  capabilityId Int

  knowledge    Knowledge  @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
  knowledgeId  Int

  @@id([capabilityId, knowledgeId])
  @@index([knowledgeId])
  @@map("capability_knowledge")
}