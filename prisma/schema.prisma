generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum para tipo de capacidade
enum Tipo {
  BASICAn
  TECNICA
}

/// Enum para dificuldade das questões
enum Dificuldade {
  FACIL
  MEDIO
  DIFICIL
}

/// Cursos
model Course {
  id   Int    @id @default(autoincrement())
  name String

  ucs Uc[]

  @@map("courses")
}

/// Módulos
model Module {
  id   Int    @id @default(autoincrement())
  name String

  ucs Uc[]

  @@map("modules")
}

/// Unidades Curriculares
model Uc {
  id          Int    @id @default(autoincrement())
  description String
  courseId    Int
  moduleId    Int

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  capabilitySaepLinks CapabilitySaepUc[] @relation("UcToSaep")
  caps                Capability[]       @relation("UcToCapability")

  @@index([courseId])
  @@index([moduleId])
  @@map("ucs")
}

/// Taxonomia de Bloom
model BloomTaxonomy {
  id       Int     @id @default(autoincrement())
  name     String
  examples String?

  saepCaps CapabilitiesSaep[] @relation("BloomToSaep")
  caps     Capability[]       @relation("BloomToCapability")

  @@map("bloom_taxonomies")
}

/// Capacidades SAEP
model CapabilitiesSaep {
  id              Int    @id @default(autoincrement())
  description     String
  bloomTaxonomyId Int
  tipo            Tipo

  bloomTaxonomy    BloomTaxonomy               @relation("BloomToSaep", fields: [bloomTaxonomyId], references: [id], onDelete: Cascade)
  caps             Capability[]                @relation("SaepToCapabilities")
  subFunctionsLink CapabilitySaepSubFunction[] @relation("SaepToSubFunc")
  ucLinks          CapabilitySaepUc[]          @relation("UcToSaep")
  questionItems    QuestionItem[]

  @@index([bloomTaxonomyId])
  @@map("capabilities_saep")
}

/// Funções
model Functions {
  id          Int    @id @default(autoincrement())
  description String

  subFuncs      SubFunction[]               @relation("FuncToSubFunc")
  saepLink      CapabilitySaepSubFunction[] @relation("SaepToSubFunc")
  questionItems QuestionItem[]

  @@map("functions")
}

/// Subfunções
model SubFunction {
  id          Int    @id @default(autoincrement())
  description String
  functionId  Int

  function      Functions                                  @relation("FuncToSubFunc", fields: [functionId], references: [id], onDelete: Cascade)
  standards     PerformanceStandard[]                      @relation("SubFuncToPerf")
  saepLink      CapabilitySaepSubFunction[]                @relation("SaepToSubFunc")
  perfLink      CapabilitySubFunctionPerformanceStandard[] @relation("CapToPerf")
  questionItems QuestionItem[]

  @@index([functionId])
  @@map("sub_functions")
}

/// Padrões de Desempenho
model PerformanceStandard {
  id            Int    @id @default(autoincrement())
  description   String
  subFunctionId Int

  subFunction   SubFunction                                @relation("SubFuncToPerf", fields: [subFunctionId], references: [id], onDelete: Cascade)
  capPerfLink   CapabilitySubFunctionPerformanceStandard[] @relation("CapToPerf")
  questionItems QuestionItem[]

  @@index([subFunctionId])
  @@map("performance_standards")
}

/// Conhecimentos
model Knowledge {
  id          Int     @id @default(autoincrement())
  description String
  examples    String?

  capLinks          CapabilityKnowledge[] @relation("CapaToKnowledge")
  questionKnowledge QuestionKnowledge[]

  @@map("knowledge")
}

/// Capacidades
model Capability {
  id               Int    @id @default(autoincrement())
  description      String
  bloomTaxonomyId  Int
  ucId             Int
  capabilitySaepId Int?
  tipo             Tipo

  bloomTaxonomy  BloomTaxonomy                              @relation("BloomToCapability", fields: [bloomTaxonomyId], references: [id], onDelete: Cascade)
  uc             Uc                                         @relation("UcToCapability", fields: [ucId], references: [id], onDelete: Cascade)
  saep           CapabilitiesSaep?                          @relation("SaepToCapabilities", fields: [capabilitySaepId], references: [id], onDelete: Cascade)
  knowledgeLinks CapabilityKnowledge[]                      @relation("CapaToKnowledge")
  perfLink       CapabilitySubFunctionPerformanceStandard[] @relation("CapToPerf")
  QuestionItem   QuestionItem[]

  @@index([bloomTaxonomyId])
  @@index([ucId])
  @@index([capabilitySaepId])
  @@map("capabilities")
}

/// Tabela de Conhecimento por Capacidade (antes junção composta)
model CapabilityKnowledge {
  id           Int @id @default(autoincrement())
  capabilityId Int
  knowledgeId  Int

  capability Capability @relation("CapaToKnowledge", fields: [capabilityId], references: [id], onDelete: Cascade)
  knowledge  Knowledge  @relation("CapaToKnowledge", fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@index([knowledgeId])
  @@map("capability_knowledge")
}

/// Junction: CapabilitiesSaep <-> Uc
model CapabilitySaepUc {
  id               Int @id @default(autoincrement())
  capabilitySaepId Int
  ucId             Int

  capabilitySaep CapabilitiesSaep @relation("UcToSaep", fields: [capabilitySaepId], references: [id], onDelete: Cascade)
  uc             Uc               @relation("UcToSaep", fields: [ucId], references: [id], onDelete: Cascade)

  @@index([ucId])
  @@map("capability_saep_uc")
}

/// Junction: CapabilitiesSaep <-> Functions <-> SubFunction
model CapabilitySaepSubFunction {
  id               Int @id @default(autoincrement())
  capabilitySaepId Int
  functionId       Int
  subFunctionId    Int

  capabilitySaep CapabilitiesSaep @relation("SaepToSubFunc", fields: [capabilitySaepId], references: [id], onDelete: Cascade)
  function       Functions        @relation("SaepToSubFunc", fields: [functionId], references: [id], onDelete: Cascade)
  subFunction    SubFunction      @relation("SaepToSubFunc", fields: [subFunctionId], references: [id], onDelete: Cascade)

  @@index([functionId, subFunctionId])
  @@map("capability_saep_functions_sub_functions")
}

/// Junction: Capability <-> PerformanceStandard <-> SubFunction
model CapabilitySubFunctionPerformanceStandard {
  id                    Int @id @default(autoincrement())
  capabilityId          Int
  performanceStandardId Int
  subFunctionId         Int

  capability  Capability          @relation("CapToPerf", fields: [capabilityId], references: [id], onDelete: Cascade)
  performance PerformanceStandard @relation("CapToPerf", fields: [performanceStandardId], references: [id], onDelete: Cascade)
  subFunction SubFunction         @relation("CapToPerf", fields: [subFunctionId], references: [id], onDelete: Cascade)

  @@index([performanceStandardId, subFunctionId])
  @@map("capabilities_sub_functions_performance_standard")
}

/// Itens de Avaliação (Perguntas)
model QuestionItem {
  id         Int         @id @default(autoincrement())
  textMd     String      @db.Text // Enunciado em Markdown
  contextMd  String      @db.Text // Contexto em Markdown
  commandMd  String      @db.Text // Comando em Markdown
  difficulty Dificuldade @default(MEDIO)

  // Relações: opcionalmente SAEP ou Normal
  capabilitySaepId      Int? // FK para Capacidades SAEP (opcional)
  capabilityId          Int? // FK para Capacidades normais (opcional)
  functionId            Int? // Funcão (opcional se normal)
  subFunctionId         Int? // Subfunção (opcional se normal)
  performanceStandardId Int? // Padrão de desempenho (opcional se normal)

  capabilitySaep      CapabilitiesSaep?    @relation(fields: [capabilitySaepId], references: [id], onDelete: Cascade)
  capability          Capability?          @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
  function            Functions?           @relation(fields: [functionId], references: [id], onDelete: Cascade)
  subFunction         SubFunction?         @relation(fields: [subFunctionId], references: [id], onDelete: Cascade)
  performanceStandard PerformanceStandard? @relation(fields: [performanceStandardId], references: [id], onDelete: Cascade)

  knowledgeLinks QuestionKnowledge[]
  alternatives   Alternative[]
  attachments    Attachment[]

  @@index([capabilitySaepId])
  @@index([capabilityId])
  @@index([functionId])
  @@index([subFunctionId])
  @@index([performanceStandardId])
  @@map("question_items")
}

/// Relação Perguntas <-> Conhecimentos
model QuestionKnowledge {
  id             Int @id @default(autoincrement())
  questionItemId Int
  knowledgeId    Int

  questionItem QuestionItem @relation(fields: [questionItemId], references: [id], onDelete: Cascade)
  knowledge    Knowledge    @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@index([knowledgeId])
  @@map("question_knowledge")
}

/// Alternativas de Resposta
model Alternative {
  id             Int     @id @default(autoincrement())
  questionItemId Int
  textMd         String  @db.Text // Texto da alternativa em Markdown
  isCorrect      Boolean @default(false)

  questionItem QuestionItem @relation(fields: [questionItemId], references: [id], onDelete: Cascade)
  attachments  Attachment[]

  @@index([questionItemId])
  @@map("alternatives")
}

/// Anexos (imagens, código, etc.)
model Attachment {
  id Int @id @default(autoincrement())

  // Polimórfico simples: vincula a pergunta ou à alternativa
  questionItemId Int?
  alternativeId  Int?

  type      String // ex: "IMAGE", "CODE", "FILE"
  url       String // caminho ou URL do arquivo
  captionMd String? @db.Text // legenda em Markdown
  order     Int     @default(0)

  questionItem QuestionItem? @relation(fields: [questionItemId], references: [id], onDelete: Cascade)
  alternative  Alternative?  @relation(fields: [alternativeId], references: [id], onDelete: Cascade)

  @@index([questionItemId])
  @@index([alternativeId])
  @@map("attachments")
}
